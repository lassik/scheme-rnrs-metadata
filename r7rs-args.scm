(syntax "quote" (arg "datum"))
(syntax "lambda" (arg "formals") (arg "body"))
(syntax "if" (arg "test") (arg "consequent") (arg "alternate"))
(syntax "if" (arg "test") (arg "consequent"))
(syntax "set!" (arg "variable") (arg "expression"))
(syntax "include" (arg "string") (arg "string") (arg "..." rest))
(syntax "include-ci" (arg "string") (arg "string") (arg "..." rest))
(syntax "cond" (arg "clause") (arg "clause") (arg "..." rest))
(syntax "case" (arg "key") (arg "clause") (arg "clause") (arg "..." rest))
(syntax "and" (arg "test") (arg "..." rest))
(syntax "or" (arg "test") (arg "..." rest))
(syntax "when" (arg "test") (arg "expression") (arg "expression") (arg "..." rest))
(syntax "unless" (arg "test") (arg "expression") (arg "expression") (arg "..." rest))
(syntax "cond-expand" (arg "ce-clause") (arg "ce-clause") (arg "..." rest))
(syntax "let" (arg "bindings") (arg "body"))
(syntax "let*" (arg "bindings") (arg "body"))
(syntax "letrec" (arg "bindings") (arg "body"))
(syntax "letrec*" (arg "bindings") (arg "body"))
(syntax "let-values" (arg "mv binding spec") (arg "body"))
(syntax "let*-values" (arg "mv binding spec") (arg "body"))
(syntax "begin" (arg "expression or definition") (arg "..." rest))
(syntax "begin" (arg "expression") (arg "expression") (arg "..." rest))
(procedure "eqv?" (arg "obj") (arg "obj"))
(procedure "eq?" (arg "obj") (arg "obj"))
(procedure "equal?" (arg "obj") (arg "obj"))
